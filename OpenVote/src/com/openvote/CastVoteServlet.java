package com.openvote;

import java.io.IOException;
import java.util.*;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

import static com.googlecode.objectify.ObjectifyService.ofy;
 

@SuppressWarnings("serial")
public class CastVoteServlet extends HttpServlet {

	public void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws IOException {
	}
	
    public void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws IOException {
    
      UserService userService=UserServiceFactory.getUserService();
  	  User user=userService.getCurrentUser();
    	
  	  if (userService.isUserAdmin()) {
  		  

    	String candidate_str = req.getParameter("candidate");
    	
    	// cast real vote
    	ArrayList<Vote> votes = new ArrayList<Vote>();
    	Vote vote = new Vote(Candidate.valueOf(candidate_str).ordinal());
    	ofy().save().entity(vote).now(); 	
    	votes.add(vote);
    	//TODO: verify that the autogenerated id is unique
    	
    	//TODO: make private
    	// cast vote for all fake candidates
		for (Candidate c: Candidate.values()) {
			Vote fakeVote = new Vote(c.ordinal());
    		ofy().save().entity(fakeVote).now();
    		votes.add(fakeVote);
    	}
    	
    	// pass real and fake vote information to display keys page
		req.setAttribute("votes", votes);
		req.setAttribute("numFakeVoteBatches", 1);
		RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/displayVoteKeys.jsp");
		try
		{
			dispatcher.forward(req, resp);
		} catch (ServletException e)
		{
			e.printStackTrace();
		}
		
  	  } else {
  		resp.sendRedirect(userService.createLoginURL(req.getRequestURI()));
		  }
		
    }
  	  
  	  

}
